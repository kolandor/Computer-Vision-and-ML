# Импорт библиотек для работы с изображениями и визуализации
import cv2  # OpenCV для работы с изображениями
import numpy as np  # NumPy для численных операций
from matplotlib import pyplot as plt  # Matplotlib для построения графиков

# Настройка размера фигур по умолчанию для лучшей визуализации
plt.rcParams['figure.figsize'] = [15, 5]

# ============================================================================
# ГАММА-КОРРЕКЦИЯ
# ============================================================================
# Гамма-коррекция - это нелинейная операция над пикселями изображения,
# которая позволяет корректировать яркость и контрастность.

def gamma_correction(img, gamma):
    """
    Применяет гамма-коррекцию к изображению.
    
    Параметры:
        img: изображение (массив numpy) в диапазоне [0, 1]
        gamma: значение гаммы (>1 делает изображение ярче, <1 делает темнее)
    
    Возвращает:
        Скорректированное изображение, где каждый пиксель возведён в степень gamma
    """
    # Получаем размеры изображения (высота, ширина, количество каналов)
    rows, cols, channels = img.shape
    
    # Создаём выходное изображение такого же размера, заполненное нулями
    out = np.zeros_like(img)
    
    # Проходим по каждому пикселю изображения
    for r in range(rows):      # По строкам
        for c in range(cols):  # По столбцам
            for ch in range(channels):  # По цветовым каналам (R, G, B)
                # Применяем гамма-коррекцию: возводим значение пикселя в степень gamma
                out[r, c, ch] = img[r, c, ch]**gamma
    
    return out

# ============================================================================
# ЗАГРУЗКА И ПРЕДОБРАБОТКА ИЗОБРАЖЕНИЯ
# ============================================================================

# Загружаем изображение из файла
img = cv2.imread('data/dark.png')

# Преобразуем из формата BGR (Blue-Green-Red) в RGB и нормализуем значения в диапазон [0, 1]
# OpenCV использует формат BGR, а matplotlib ожидает RGB
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)/255.0

# ============================================================================
# ВИЗУАЛИЗАЦИЯ РЕЗУЛЬТАТОВ ГАММА-КОРРЕКЦИИ
# ============================================================================

# Создаём сетку из 3 графиков (1 строка, 3 столбца)
plt.figure(figsize=(15, 5))

# Первый график: оригинальное изображение
plt.subplot(131)
plt.imshow(img)
plt.title('Оригинальное изображение\n(без коррекции)', fontsize=12, fontweight='bold')
plt.axis('off')

# Второй график: гамма-коррекция с gamma=1.5 (увеличивает яркость)
plt.subplot(132)
plt.imshow(gamma_correction(img, gamma=1.5))
plt.title('Гамма-коррекция: γ = 1.5\n(увеличение яркости)', fontsize=12, fontweight='bold')
plt.axis('off')

# Третий график: гамма-коррекция с gamma=1/3 (уменьшает яркость, делает изображение темнее)
plt.subplot(133)
plt.imshow(gamma_correction(img, gamma=1/3))
plt.title('Гамма-коррекция: γ = 1/3\n(уменьшение яркости)', fontsize=12, fontweight='bold')
plt.axis('off')

plt.tight_layout()
plt.show()  # Отображаем графики

# ============================================================================
# ГРАФИКИ ЗАВИСИМОСТИ INPUT/OUTPUT ДЛЯ РАЗНЫХ ЗНАЧЕНИЙ GAMMA
# ============================================================================

# Создаём массив входных значений (0, 1/255, 2/255, ..., 255/255)
# Это нормализованные значения яркости от 0 до 1
colors = np.arange(0, 256)/255

plt.figure(figsize=(15, 5))

# Первый график: линейная функция (gamma=1, без изменений)
plt.subplot(131)
plt.plot(colors, colors**1, 'b-', linewidth=2)
plt.xlabel('Входная яркость (input)', fontsize=10)
plt.ylabel('Выходная яркость (output)', fontsize=10)
plt.title('Линейная функция: γ = 1\n(без изменений)', fontsize=12, fontweight='bold')
plt.grid(True, alpha=0.3)
plt.xlim([0, 1])
plt.ylim([0, 1])

# Второй график: гамма-коррекция с gamma=1.5 (усиление яркости)
plt.subplot(132)
plt.plot(colors, colors**1.5, 'g-', linewidth=2)
plt.xlabel('Входная яркость (input)', fontsize=10)
plt.ylabel('Выходная яркость (output)', fontsize=10)
plt.title('Гамма-коррекция: γ = 1.5\n(усиление яркости)', fontsize=12, fontweight='bold')
plt.grid(True, alpha=0.3)
plt.xlim([0, 1])
plt.ylim([0, 1])

# Третий график: гамма-коррекция с gamma=1/3 (ослабление яркости)
plt.subplot(133)
plt.plot(colors, colors**(1/3), 'r-', linewidth=2)
plt.xlabel('Входная яркость (input)', fontsize=10)
plt.ylabel('Выходная яркость (output)', fontsize=10)
plt.title('Гамма-коррекция: γ = 1/3\n(ослабление яркости)', fontsize=12, fontweight='bold')
plt.grid(True, alpha=0.3)
plt.xlim([0, 1])
plt.ylim([0, 1])

plt.tight_layout()
plt.show()  # Отображаем графики

# ============================================================================
# СРАВНЕНИЕ ХАРАКТЕРИСТИК КАМЕРЫ И ЧЕЛОВЕЧЕСКОГО ГЛАЗА
# ============================================================================

# Создаём сетку из 2 графиков (1 строка, 2 столбца)
plt.figure(figsize=(12, 5))

# Первый график: линейная характеристика камеры (без гамма-коррекции)
# Камера воспринимает свет линейно: удвоение света = удвоение яркости
plt.subplot(121)
plt.plot(colors, colors, 'b-', linewidth=2)
plt.xlabel('Интенсивность света (input)', fontsize=10)
plt.ylabel('Воспринимаемая яркость (output)', fontsize=10)
plt.title('Характеристика камеры\n(линейное восприятие)', fontsize=12, fontweight='bold')
plt.grid(True, alpha=0.3)
plt.xlim([0, 1])
plt.ylim([0, 1])
plt.text(0.5, 0.8, 'Удвоение света\n= Удвоение яркости', 
         fontsize=9, ha='center', bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.5))

# Второй график: нелинейная характеристика человеческого глаза
# Глаз воспринимает свет логарифмически: gamma ≈ 1/2.2
# Это позволяет видеть как в темноте, так и при ярком свете
plt.subplot(122)
plt.plot(colors, colors**(1/2.2), 'g-', linewidth=2)
plt.xlabel('Интенсивность света (input)', fontsize=10)
plt.ylabel('Воспринимаемая яркость (output)', fontsize=10)
plt.title('Характеристика человеческого глаза\n(нелинейное восприятие, γ ≈ 1/2.2)', fontsize=12, fontweight='bold')
plt.grid(True, alpha=0.3)
plt.xlim([0, 1])
plt.ylim([0, 1])
plt.text(0.5, 0.8, 'Логарифмическое\nвосприятие света', 
         fontsize=9, ha='center', bbox=dict(boxstyle='round', facecolor='lightgreen', alpha=0.5))

plt.tight_layout()
plt.show()  # Отображаем графики

# ============================================================================
# АНАЛИЗ РАЗМЕРОВ КВАНТОВАНИЯ
# ============================================================================
# Квантование - это процесс дискретизации непрерывных значений яркости
# в дискретные уровни (например, 256 уровней для 8-битного изображения)

plt.figure(figsize=(12, 6))

# Применяем гамма-коррекцию глаза к значениям яркости
quants = colors**(1/2.2)

# Вычисляем размеры квантов: разность между соседними уровнями
# Это показывает, как равномерно распределены уровни квантования
quants = quants[1:] - quants[0:-1]

# Строим столбчатую диаграмму размеров квантов
plt.bar(colors[0:-1], quants, width=1/512, alpha=0.6, color='steelblue', label='Квантование с гамма-коррекцией')

# Добавляем горизонтальную линию, показывающую размер кванта без гамма-коррекции
# (равномерное квантование: 1/255 для каждого уровня)
plt.axhline(y=1/255, color='r', linestyle='--', linewidth=2, label='Квантование без гамма-коррекции (равномерное)')

plt.xlabel('Входная яркость (input)', fontsize=11)
plt.ylabel('Размер кванта (output)', fontsize=11)
plt.title('Размеры квантов при гамма-коррекции глаза (γ = 1/2.2)\n' + 
          'Больше уровней квантования в тёмных областях', fontsize=12, fontweight='bold')
plt.grid(True, alpha=0.3)
plt.ylim([0, 0.02])
plt.legend(loc='upper right', fontsize=10)
plt.text(0.7, 0.016, 'Тёмные области: больше уровней квантования\nСветлые области: меньше уровней квантования', 
         fontsize=9, bbox=dict(boxstyle='round', facecolor='yellow', alpha=0.3))

plt.tight_layout()
plt.show()  # Отображаем графики